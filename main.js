(()=>{"use strict";const t=async function(t,e){const n=await async function(t,e){return await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&units=${e}&APPID=8d838cab2623bf0e4ccf3c4d32eab7bb`,{mode:"cors"}).then((t=>t.json())).then((t=>t))}(t,e);return function(t){const e=t.name,{country:n}=t.sys,{temp:i}=t.main,c=t.weather[0].main;return{city:e,country:n,temp:i,weather:c,keyword:c}}(n)};async function e(t){return await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=ieAImKLCMr3MRyKct42s8BMVBEdSgL0A&s=${t}`,{mode:"cors"}).then((t=>t.json())).then((t=>t))}const n=async function(t){const n=await e(t);return e(n)},i=/^[a-z]{2}$/i;const c=function(t,e,n){t.innerText="";const i=document.createElement("form");t.appendChild(i);const c=document.createElement("label");i.appendChild(c),c.innerText="City";const o=document.createElement("input");c.appendChild(o),o.setAttribute("name","city"),o.toggleAttribute("required");const r=document.createElement("label");i.appendChild(r),r.innerText="Units";const a=(t,e,n,i)=>{const c=document.createElement("label");r.appendChild(c),c.innerText=t;const o=document.createElement("input");return c.appendChild(o),o.setAttribute("type","radio"),o.setAttribute("name",n),o.value=e,i&&o.toggleAttribute("checked"),[c,o]},[s,u]=a("Celcius","metric","units",!0),[d,m]=a("Farenheit","imperial","units",!1),l=document.createElement("input");i.appendChild(l),l.setAttribute("type","submit"),l.value="Submit",l.addEventListener("click",(t=>{if(!o.validity.valid)return!1;t.preventDefault();const e=new FormData(i);n(e.get("city"),e.get("units"))}))},o=function(t,e){e.innerText="Now Loading..."},r=function(t,e,n,c){e.innerText="";const o=function(t){if(!i.test(t)){const e=typeof t;throw new TypeError(`cc argument must be an ISO 3166-1 alpha-2 string, but got '${"string"===e?t:e}' instead.`)}const e=[...t.toUpperCase()].map((t=>t.codePointAt()+127397));return String.fromCodePoint(...e)}(n.country),r=document.createElement("div");e.appendChild(r),r.innerText=`${n.city} ${o}`;const a=document.createElement("div");e.appendChild(a),a.innerText=n.temp;const s=document.createElement("div");e.appendChild(s),s.innerText=n.weather,c.then((t=>{console.log("image to load: ",t);const i=document.createElement("img");e.appendChild(i),i.setAttribute("src",t),i.setAttribute("alt",`Image of ${n.weather}`)}))},a=document.querySelector("#dom-inputs"),s=document.querySelector("#dom-outputs");c(a,s,((e,i)=>{o(a,s),t(e,i).then((t=>{console.log(t);const e=n(t.keyword);r(a,s,t,e)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,