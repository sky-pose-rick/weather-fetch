(()=>{"use strict";const t=async function(t,e){const n=await async function(t,e){return(await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&units=${e}&APPID=8d838cab2623bf0e4ccf3c4d32eab7bb`,{mode:"cors"})).json()}(t,e);return function(t){const e=t.name,{country:n}=t.sys,{temp:i}=t.main,c=t.weather[0].main;return{city:e,country:n,temp:i,weather:c,keyword:c}}(n)},e=async function(t){const e=await async function(t){return(await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=ieAImKLCMr3MRyKct42s8BMVBEdSgL0A&s=${t}`,{mode:"cors"})).json()}(t);return function(t){return t.data.images.original.url}(e)},n=/^[a-z]{2}$/i;const i=function(t,e,n){t.innerText="";const i=document.createElement("form");t.appendChild(i);const c=document.createElement("label");i.appendChild(c),c.innerText="City";const r=document.createElement("input");c.appendChild(r),r.setAttribute("name","city"),r.toggleAttribute("required");const o=document.createElement("label");i.appendChild(o),o.innerText="Units";const a=(t,e,n,i)=>{const c=document.createElement("label");o.appendChild(c),c.innerText=t;const r=document.createElement("input");return c.appendChild(r),r.setAttribute("type","radio"),r.setAttribute("name",n),r.value=e,i&&r.toggleAttribute("checked"),[c,r]},[u,s]=a("Celcius","metric","units",!0),[d,m]=a("Farenheit","imperial","units",!1),l=document.createElement("input");i.appendChild(l),l.setAttribute("type","submit"),l.value="Submit",l.addEventListener("click",(t=>{if(!r.validity.valid)return!1;t.preventDefault();const e=new FormData(i);n(e.get("city"),e.get("units"))}))},c=function(t,e){e.innerText="Now Loading..."},r=function(t,e,i,c){e.innerText="";const r=function(t){if(!n.test(t)){const e=typeof t;throw new TypeError(`cc argument must be an ISO 3166-1 alpha-2 string, but got '${"string"===e?t:e}' instead.`)}const e=[...t.toUpperCase()].map((t=>t.codePointAt()+127397));return String.fromCodePoint(...e)}(i.country),o=document.createElement("div");e.appendChild(o),o.innerText=`${i.city} ${r}`;const a=document.createElement("div");e.appendChild(a),a.innerText=i.temp;const u=document.createElement("div");e.appendChild(u),u.innerText=i.weather,c.then((t=>{console.log("image to load: ",t);const n=document.createElement("img");e.appendChild(n),n.setAttribute("src",t),n.setAttribute("alt",`Image of ${i.weather}`)}))},o=document.querySelector("#dom-inputs"),a=document.querySelector("#dom-outputs");i(o,a,((n,i)=>{c(o,a),t(n,i).then((t=>{console.log(t);const n=e(t.keyword);r(o,a,t,n)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,